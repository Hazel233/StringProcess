use_git
use()
use_git()
library(devtools)
use_git()
library("devtools")
use_r("strsplit")
check()
use_mit_license("Hazel Hao")
document()
install()
use_testthat()
use_test("strsplit")
use_package("StringProcess")
check()
use_r("evenstrings")
#' @return returns a vector with the shortened and cut input string
#' @export
#' @author Jakob Gepp
#'
#' @examples
#' x <- "Hello world, this is a test sequence."
#' evenstrings(x, split = ",", char = 30, newlines = FALSE)
#' # [1] "Hello world,"              " this is a test sequence."
#'
#'
evenstrings <- function(x = c(),
split = " ",
char = 80,
newlines = FALSE) {
# error checks and warnings
if (length(x) > 1) {
x <- x[[1]]
warning("x is a vector, only the first element is used.")
} else if (length(x) == 0) {
# if x is emmtpy return list()
return(list())
}
if (is.na(x)) {
return(list())
}
# splitting
x1 <- strsplit(x, split, type = "after")[[1]]
# get number of character
charsum <- nchar(x1)
bits <- as.list(rep(as.numeric(NA), length(charsum)))
last_i <- 1
for (i in seq_along(charsum)) {
tmp_sum <- sum(charsum[last_i:i])
if (tmp_sum > char) {
last_i <- i
}
bits[[last_i]] <- last_i:i
}
# check length
check <- sapply(bits, function(b) sum(nchar(x1[b]), na.rm = TRUE))
if (any(check > char)) {
warning("There are longer lines because of the chosen split pattern.")
}
# collapse new bits
bits <- na_omitlist(bits)
out <- sapply(bits, function(b) paste(x1[b], collapse = ""))
if (newlines == TRUE) {
out <- paste0(out, collapse = "\n")
}
return(out)
}
use_that(evenstrings)
use_test(evenstrings)
use_test("evenstrings")
?sapply
use_r("na_omitlist")
use_test("na_omitlist")
use_package("StringProcess")
y <- y[!sapply(y, function(x) all(is.na(x)))]
check()
istall()
install()
use_package("StringProcess")
use_github()
document()
delete_na <- function(y = list(),
recursive = FALSE) {
if (recursive && anyNA(y, recursive = TRUE)) {
y <- y[!sapply(y, function(x) all(is.na(x)))]
y <- sapply(y, na_omitlist, recursive = TRUE, simplify = TRUE)
} else {
y <- y[!sapply(y, function(x) all(is.na(x)), simplify = TRUE)]
}
return(y)
}
delete_na <- function(y = list(),
recursive = FALSE) {
if (recursive && anyNA(y, recursive = TRUE)) {
y <- y[!sapply(y, function(x) all(is.na(x)))]
y <- sapply(y, na_omitlist, recursive = TRUE, simplify = TRUE)
} else {
y <- y[!sapply(y, function(x) all(is.na(x)), simplify = TRUE)]
}
return(y)
}
install()
install()
delete_na <- function(y = list(),
recursive = FALSE) {
if (recursive && anyNA(y, recursive = TRUE)) {
y <- y[!sapply(y, function(x) all(is.na(x)))]
y <- sapply(y, na_omitlist, recursive = TRUE, simplify = TRUE)
} else {
y <- y[!sapply(y, function(x) all(is.na(x)), simplify = TRUE)]
}
return(y)
}
use_test("delete_na")
res2 <- list(c(1:3), letters[1:4], c(1), list(c(5:6), "A"))
use_package("StringProcess")
use_test("delete_na")
document()
delete()
use_package("StringProcess")
use_package("StringProcess")
document()
use_r("delete_r")
use_r("delete_na")
use_test("delete_na")
# [1] 1
use_r("cutcertainstr")
use_test("cutcertainstr")
check()
.Last.error.trace
document()
install()
check()
